package utils;

import com.sun.javadoc.FieldDoc;
import field.DBField;
import field.OneToOne;
import org.apache.log4j.Logger;
import support.JDBCConnectionSource;
import table.DBTable;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by said on 25.02.17.
 */
public class TableUtils {

    private final static Logger LOGGER = Logger.getLogger(TableUtils.class);

    private TableUtils() {
    }

    public static<T> void createTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        String dbTableName = dbTable.getAnnotation(DBTable.class).name();
        StringBuilder sbCreateTable = new StringBuilder();
        Field foreigKeyField = null;

        sbCreateTable.append("CREATE TABLE ").append(dbTableName).append("(");
        for (java.lang.reflect.Field field: dbTable.getDeclaredFields()) {
            if (field.isAnnotationPresent(DBField.class)) {
                sbCreateTable.append(field.getAnnotation(DBField.class).fieldName()).append(" ");
                sbCreateTable.append(field.getAnnotation(DBField.class).dataType().toString()).append(" ");
                sbCreateTable.append(field.getAnnotation(DBField.class).id() ? "PRIMARY KEY" : "").append(" ");
                if (field.getAnnotation(DBField.class).autoGeneratedId()) {
                    sbCreateTable.append("AUTOINCREMENT").append(", ");
                } else {
                    sbCreateTable.append(field.getAnnotation(DBField.class).canBeNull() ? "NULL" : "NOT NULL").append(", ");
                }
                if (field.isAnnotationPresent(OneToOne.class)) {
                    foreigKeyField = field;
                }
            }
        }
        if (foreigKeyField != null) {
            Field id = null;

            sbCreateTable.append("FOREIGN KEY ")
                    .append("(")
                    .append(foreigKeyField.getAnnotation(DBField.class).fieldName())
                    .append(") ")
                    .append("REFERENCES ")
                    .append(foreigKeyField.getType().getAnnotation(DBTable.class).name())
                    .append("(")
                    .append(id == null ? "" : id.getAnnotation(DBField.class).fieldName())
                    .append("));");
        } else {
            sbCreateTable.replace(sbCreateTable.length() - 2, sbCreateTable.length(), ");");
        }
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            statement.execute(sbCreateTable.toString());
            LOGGER.debug(sbCreateTable.toString());
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    public static<T> void dropTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        String dropTableSQL = "DROP TABLE " + dbTable.getAnnotation(DBTable.class).name();
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            statement.execute(dropTableSQL);
            LOGGER.debug(dropTableSQL);
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    public static<T> void clearTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        String truncateTableSQL = "DELETE FROM " + dbTable.getAnnotation(DBTable.class).name();
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            statement.execute(truncateTableSQL);
            LOGGER.debug(truncateTableSQL);
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }
}
