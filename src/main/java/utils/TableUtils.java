package utils;

import com.sun.javadoc.FieldDoc;
import field.DBField;
import field.OneToOne;
import jdk.nashorn.internal.scripts.JD;
import org.apache.log4j.Logger;
import support.JDBCConnectionSource;
import table.DBTable;
import table.TableInfo;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by said on 25.02.17.
 */
public class TableUtils {

    private final static Logger LOGGER = Logger.getLogger(TableUtils.class);

    private TableUtils() {
    }

    public static <T> void createTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        TableInfo<T> tableInfo = new TableInfo<>(dbTable);
        StringBuilder sbCreateTable = new StringBuilder();

        if (isExistTable(connectionSource, tableInfo.getTableName())) {
            return;
        }
        sbCreateTable.append("CREATE TABLE ").append(tableInfo.getTableName()).append("(");
        Field id = tableInfo.getId();

        if (id != null) {
            sbCreateTable.append(id.getAnnotation(DBField.class).fieldName()).append(" ");
            sbCreateTable.append(id.getAnnotation(DBField.class).dataType().toString()).append(" ");
            sbCreateTable.append(id.getAnnotation(DBField.class).id() ? "PRIMARY KEY" : "").append(" ");
            if (id.getAnnotation(DBField.class).autoGeneratedId()) {
                sbCreateTable.append("AUTOINCREMENT").append(", ");
            }
        }
        for (java.lang.reflect.Field field : tableInfo.getFields()) {
            appendField(field, sbCreateTable);
        }
        for (Field field: tableInfo.getOneToOneRelations()) {
            appendField(field, sbCreateTable);
        }
        for (Field field: tableInfo.getManyToOneRelations()) {
            appendField(field, sbCreateTable);
        }
        for (Field field: tableInfo.getOneToOneRelations()) {
            appendForeignKey(field, sbCreateTable);
        }
        for (Field field: tableInfo.getManyToOneRelations()) {
            appendForeignKey(field, sbCreateTable);
        }
        sbCreateTable.replace(sbCreateTable.length() - 2, sbCreateTable.length(), ");");
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            statement.execute(sbCreateTable.toString());
            LOGGER.debug(sbCreateTable.toString());
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    private static void appendField(Field field, StringBuilder sb) {
        sb.append(field.getAnnotation(DBField.class).fieldName()).append(" ");
        sb.append(field.getAnnotation(DBField.class).dataType().toString()).append(" ");
        sb.append(field.getAnnotation(DBField.class).id() ? "PRIMARY KEY" : "").append(" ");
        sb.append(field.getAnnotation(DBField.class).canBeNull() ? "NULL" : "NOT NULL").append(", ");
    }

    private static void appendForeignKey(Field field, StringBuilder sb) {
        TableInfo tableInfo = new TableInfo<>(field.getType());

        sb.append("FOREIGN KEY ")
                .append("(")
                .append(field.getAnnotation(DBField.class).fieldName())
                .append(") ")
                .append("REFERENCES ")
                .append(field.getType().getAnnotation(DBTable.class).name())
                .append("(")
                .append(tableInfo.getId().getAnnotation(DBField.class).fieldName())
                .append("));");
    }

    public static boolean isExistTable(JDBCConnectionSource connectionSource, String tableName) throws SQLException {
        String sql = "SELECT name FROM sqlite_master WHERE type='table' AND name='" + tableName + "'";
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            ResultSet resultSet = null;

            try {
                resultSet = statement.executeQuery(sql);
                if (resultSet.next()) {
                    return !resultSet.getString("name").isEmpty();
                }
            } finally {
              if (resultSet != null) {
                  resultSet.close();
              }
            }
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
        return false;
    }

    public static void createManyToManyTable(JDBCConnectionSource connectionSource, TableInfo tableInfo, TableInfo tableInfo1) throws SQLException {
        String manyToManyTableName1 = tableInfo.getTableName() + "_" + tableInfo1.getTableName();
        String manyToManyTableName2 =  tableInfo1.getTableName() + "_"  + tableInfo.getTableName();

        if (!isExistTable(connectionSource, manyToManyTableName1) && !isExistTable(connectionSource, manyToManyTableName2)) {
            String sql = "CREATE TABLE " + manyToManyTableName1 + "(" + tableInfo.getTableName() + "_id INTEGER NOT NULL, " + tableInfo1.getTableName() + "_id INTEGER NOT NULL)";

            StatementExecutor.execute(connectionSource, sql);
        }
    }

    public static String getManyToManyRelationTableName(JDBCConnectionSource jdbcConnectionSource, String table1, String table2) throws SQLException {
        if (TableUtils.isExistTable(jdbcConnectionSource, table1 + "_" + table2)) {
            return table1 + "_" + table2;
        }
        if (TableUtils.isExistTable(jdbcConnectionSource, table2 + "_" + table1)) {
            return table2 + "_" + table1;
        }

        throw new SQLException("Relation table not found");
    }

    public static <T> void dropTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        String dropTableSQL = "DROP TABLE " + dbTable.getAnnotation(DBTable.class).name();
        StatementExecutor.execute(connectionSource, dropTableSQL);
    }

    public static <T> void clearTable(JDBCConnectionSource connectionSource, Class<T> dbTable) throws SQLException {
        String truncateTableSQL = "DELETE FROM " + dbTable.getAnnotation(DBTable.class).name();
        StatementExecutor.execute(connectionSource, truncateTableSQL);
    }
}
