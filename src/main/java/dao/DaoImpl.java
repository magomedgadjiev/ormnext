package dao;

import clause.Update;
import clause.Where;
import field.DataType;
import field.Field;
import support.JDBCConnectionSource;
import table.Table;

import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by said on 25.02.17.
 */
public class DaoImpl<T> implements Dao<T> {

    private JDBCConnectionSource connectionSource;
    private final Class<T> dbTable;

    public DaoImpl(JDBCConnectionSource connectionSource, Class<T> dbTable) {
        this.connectionSource = connectionSource;
        this.dbTable = dbTable;
    }

    public void create(T object) throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            StringBuilder sb = new StringBuilder();

            sb.append("INSERT INTO ").append(getDBTableName()).append("(");
            java.lang.reflect.Field[] fields = getDBTableFields();
            List<String> fieldNames = new ArrayList<String>();
            List<java.lang.reflect.Field> fieldListWithoutAutoGenerated = new ArrayList<java.lang.reflect.Field>();
            java.lang.reflect.Field idField = null;

            for (java.lang.reflect.Field field : fields) {
                if (field.isAnnotationPresent(Field.class) && !field.getAnnotation(Field.class).autoGeneratedId()) {
                    sb.append(field.getAnnotation(Field.class).fieldName());
                    fieldListWithoutAutoGenerated.add(field);
                    fieldNames.add(field.getName());
                }
                if (field.isAnnotationPresent(Field.class) && field.getAnnotation(Field.class).id()) {
                    idField = field;
                }
            }
            sb.append(")").append(" VALUES(");
            for (int i = 0; i < fieldListWithoutAutoGenerated.size(); ++i) {
                String fieldName = fieldNames.get(i);

                try {
                    Method method = dbTable.getDeclaredMethod("get" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1));
                    if (fieldListWithoutAutoGenerated.get(i).getAnnotation(Field.class).dataType().equals(DataType.INTEGER)) {
                        sb.append(method.invoke(object)).append(",");
                    } else {
                        sb.append("'").append(method.invoke(object)).append("'").append(",");
                    }
                } catch (Exception ignore) {
                    throw new SQLException("No getter for " + fieldName);
                }
            }
            sb.replace(sb.length() - 1, sb.length(), ")");
            statement.execute(sb.toString());
            if (idField != null) {
                int lastInsertRowId = getLastInsertRowId(statement);
                String fieldName = idField.getName();

                try {
                    String methodName = "set" + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);
                    Method method = dbTable.getDeclaredMethod(methodName, new Class[]{long.class});
                    method.invoke(object, lastInsertRowId);
                } catch (Exception ignore) {
                    throw new SQLException("No setter for " + fieldName);
                }
            }
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    @Override
    public T queryForId(long id) throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            String idField = "";
            for (java.lang.reflect.Field field : getDBTableFields()) {
                if (field.isAnnotationPresent(Field.class) && field.getAnnotation(Field.class).id()) {
                    idField = field.getAnnotation(Field.class).fieldName();

                    break;
                }
            }
            String query = "SELECT * FROM " + getDBTableName() + " WHERE " + idField + "=" + id;
            ResultSet resultSet = null;

            try {
                resultSet = statement.executeQuery(query);
                List<java.lang.reflect.Field> fields = getDBTableFieldAnnotatedFields();
                T result = dbTable.newInstance();

                while (resultSet.next()) {
                    for (java.lang.reflect.Field field : fields) {
                        String methodName = "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
                        Method method = dbTable.getDeclaredMethod(methodName, field.getType());

                        method.invoke(result, resultSet.getObject(field.getAnnotation(Field.class).fieldName()));
                    }
                }

                return result;
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                if (resultSet != null) {
                    resultSet.close();
                }
            }

            return null;
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    @Override
    public List<T> queryForAll() throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            String queryForAll = "SELECT * FROM " + getDBTableName();
            ResultSet resultSet = null;

            try {
                resultSet = statement.executeQuery(queryForAll);
                List<java.lang.reflect.Field> fields = getDBTableFieldAnnotatedFields();
                List<T> result = new ArrayList<T>();

                while (resultSet.next()) {
                    T object = dbTable.newInstance();

                    for (java.lang.reflect.Field field : fields) {
                        String methodName = "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
                        Method method = dbTable.getDeclaredMethod(methodName, field.getType());

                        method.invoke(object, resultSet.getObject(field.getAnnotation(Field.class).fieldName()));
                    }
                    result.add(object);
                }

                return result;
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                if (resultSet != null) {
                    resultSet.close();
                }
            }
            return null;
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    @Override
    public void update(T object) {

    }

    @Override
    public void delete(T object) {

    }

    @Override
    public List<T> queryForWhere(Where where) throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            StringBuilder sb = new StringBuilder();

            sb.append("SELECT * FROM ").append(getDBTableName()).append(" ").append(where.toString());
            ResultSet resultSet = null;

            try {
                resultSet = statement.executeQuery(sb.toString());
                List<java.lang.reflect.Field> fields = getDBTableFieldAnnotatedFields();
                List<T> result = new ArrayList<T>();

                while (resultSet.next()) {
                    T object = dbTable.newInstance();

                    for (java.lang.reflect.Field field : fields) {
                        String methodName = "set" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1);
                        Method method = dbTable.getDeclaredMethod(methodName, field.getType());

                        method.invoke(object, resultSet.getObject(field.getAnnotation(Field.class).fieldName()));
                    }
                    result.add(object);
                }

                return result;
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                if (resultSet != null) {
                    resultSet.close();
                }
            }

            return null;
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    @Override
    public int queryForUpdate(Update update) throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            StringBuilder sb = new StringBuilder();

            sb.append("UPDATE ").append(getDBTableName()).append(" ").append(update.toString());

            return statement.executeUpdate(sb.toString());
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    @Override
    public boolean deleteForWhere(Where where) throws SQLException {
        Statement statement = null;
        Connection connection = connectionSource.getConnection();

        try {
            statement = connection.createStatement();
            StringBuilder sb = new StringBuilder();

            sb.append("DELETE FROM ").append(getDBTableName()).append(" ").append(where.toString());

            return statement.execute(sb.toString());
        } finally {
            if (statement != null) {
                statement.close();
            }
            connectionSource.releaseConnection(connection);
        }
    }

    private String getDBTableName() {
        return dbTable.getAnnotation(Table.class).name();
    }

    private java.lang.reflect.Field[] getDBTableFields() {
        return dbTable.getDeclaredFields();
    }

    private List<java.lang.reflect.Field> getDBTableFieldAnnotatedFields() {
        java.lang.reflect.Field[] fields = getDBTableFields();
        List<java.lang.reflect.Field> result = new ArrayList<java.lang.reflect.Field>();

        for (java.lang.reflect.Field field : fields) {
            if (field.isAnnotationPresent(Field.class)) {
                result.add(field);
            }
        }

        return result;
    }

    private Method[] getDeclaredMethods() {
        return dbTable.getDeclaredMethods();
    }

    private int getLastInsertRowId(Statement statement) throws SQLException {
        String lastInsertRowId = "SELECT last_insert_rowid() AS last_id";
        ResultSet resultSet = null;

        try {
            resultSet = statement.executeQuery(lastInsertRowId);
            resultSet.next();
            int lastId = resultSet.getInt("last_id");

            return lastId;
        } finally {
            if (resultSet != null) {
                resultSet.close();
            }
        }
    }
}
