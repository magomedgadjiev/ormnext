package dao.visitor;

import clause.query.InsertQuery;
import clause.table.CreateTable;
import clause.query.UpdateValue;
import field.FieldWrapper;
import field.ManyToOne;
import field.OneToOne;
import field.TableField;
import table.Table;

/**
 * Created by said on 17.06.17.
 */
public class QueryVisitorImpl implements QueryVisitor {

    private StringBuilder queryBuilder = new StringBuilder();

    @Override
    public void start(InsertQuery insertQuery) {
        StringBuilder valuesPart = new StringBuilder();

        queryBuilder
                .append("INSERT INTO ")
                .append(insertQuery.getTableName())
                .append("(");
        valuesPart
                .append(" VALUES(");
        for (UpdateValue updateValue: insertQuery.getValues()) {
            queryBuilder
                    .append(updateValue.getName())
                    .append(",");
            valuesPart
                    .append(updateValue.getValue())
                    .append(",");
        }
        queryBuilder.replace(queryBuilder.length() - 1, queryBuilder.length(), ")");
        valuesPart.replace(valuesPart.length() - 1, valuesPart.length(), ")");
        queryBuilder.append(valuesPart.toString());
    }

    @Override
    public void start(UpdateValue updateValue) {
    }

    @Override
    public void finish(InsertQuery insertQuery) {

    }

    @Override
    public void finish(UpdateValue updateValue) {

    }

    @Override
    public String preparedQuery() {
        return queryBuilder.toString();
    }

    @Override
    public void start(CreateTable createTable) {
        TableField idField = null;

        queryBuilder.append("CREATE TABLE ").append(createTable.getName()).append("(");

        for (FieldWrapper fieldWrapper: createTable.getFieldWrappers()) {
            TableField field = (TableField) fieldWrapper.getAnnotation(TableField.class);

            if (field.id()) {
                idField = (TableField) fieldWrapper.getAnnotation(TableField.class);
                queryBuilder.append(field.fieldName()).append(" ");
                queryBuilder.append(field.dataType().toString()).append(" ");
                queryBuilder.append(field.id() ? "PRIMARY KEY" : "").append(" ");
                if (field.autoGeneratedId()) {
                    queryBuilder.append("AUTOINCREMENT").append(", ");
                }
            } else {
                queryBuilder.append(field.fieldName()).append(" ");
                queryBuilder.append(field.dataType().toString()).append(" ");
                queryBuilder.append(field.id() ? "PRIMARY KEY" : "").append(" ");
                queryBuilder.append(field.canBeNull() ? "NULL" : "NOT NULL").append(",");

                if (fieldWrapper.isAnnotationPresent(OneToOne.class) || fieldWrapper.isAnnotationPresent(ManyToOne.class)) {
                    queryBuilder.append("FOREIGN KEY ")
                            .append("(")
                            .append(field.fieldName())
                            .append(") ")
                            .append("REFERENCES ")
                            .append(((Table) fieldWrapper.getType().getAnnotation(Table.class)).name())
                            .append("(")
                            .append(idField.fieldName())
                            .append("));");
                }
            }
        }

        queryBuilder.replace(queryBuilder.length() - 1, queryBuilder.length(), ")");
    }
}
